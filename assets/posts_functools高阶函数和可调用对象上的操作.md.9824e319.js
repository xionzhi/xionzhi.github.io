import{_ as s,o as n,c as a,a as l}from"./app.06916134.js";const i=JSON.parse('{"title":"functools高阶函数和可调用对象上的操作","description":"","frontmatter":{"title":"functools高阶函数和可调用对象上的操作","author":"xionzhi","date":"2023-01-05","showAccessNumber":true,"categories":["python"],"tags":["python"],"excerpt":"一个为函数提供缓存功能的装饰器，缓存 *maxsize* 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或I/O函数的调用时间。\\n```python @lru_cache def test_lru_cache(self, a=None, b=None): time.sleep(1) return f\'{a}: {b}: {time.time()}\'\\nprint(tf.test_lru_cache(a=1, b=2)) print(tf.test_lru_cache(a=1, b=2)) print(tf.test_lru_cache(a=1, b=2)) print(tf.test_lru_cache(a=1, b=2))\\n# 1: 2: 1663580739.8764858 # 1: 2: 1663580739.8764858 # 1: 2: 1663580739.8764858 # 1: 2: 1663580739.8764858 ``` "},"headers":[],"relativePath":"posts/functools高阶函数和可调用对象上的操作.md"}'),p={name:"posts/functools高阶函数和可调用对象上的操作.md"},o=l(`<p><strong>lru_cache</strong></p><p>一个为函数提供缓存功能的装饰器，缓存 <em>maxsize</em> 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或I/O函数的调用时间。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">lru_cache</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=None,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">  time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">a</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">: </span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">b</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">: </span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 1: 2: 1663580739.8764858</span></span>
<span class="line"><span style="color:#676E95;"># 1: 2: 1663580739.8764858</span></span>
<span class="line"><span style="color:#676E95;"># 1: 2: 1663580739.8764858</span></span>
<span class="line"><span style="color:#676E95;"># 1: 2: 1663580739.8764858</span></span>
<span class="line"></span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)" target="_blank" rel="noreferrer">LRU(最久未使用算法)缓存</a> 在最近的调用是即将到来的调用的最佳预测值时性能最好（例如，新闻服务器上最热门文章倾向于每天更改）。 缓存的大小限制可确保缓存不会在长期运行进程如网站服务器上无限制地增长。</p><p>由于使用了字典存储缓存，所以该函数的固定参数和关键字参数必须是可哈希的。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># TypeError: unhashable type: &#39;list&#39;</span></span>
<span class="line"></span></code></pre></div><p>不同模式的参数可能被视为不同从而产生多个缓存项，例如, f(a=1, b=2) 和 f(b=2, a=1) 因其参数顺序不同，可能会被缓存两次。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 1: 2: 1663580928.2219331</span></span>
<span class="line"><span style="color:#676E95;"># 1: 2: 1663580929.226149</span></span>
<span class="line"></span></code></pre></div><p>如果指定了 <em>user_function</em>，它必须是一个可调用对象。 这允许 <em>lru_cache</em> 装饰器被直接应用于一个用户自定义函数，让 <em>maxsize</em> 保持其默认值 128:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">lru_cache</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">count_vowels</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sentence</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sentence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">vowel</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">for</span><span style="color:#82AAFF;"> vowel </span><span style="color:#89DDFF;">in</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AEIOUaeiou</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>如果 <em>maxsize</em> 设为 <code>None</code>，LRU 特性将被禁用且缓存可无限增长。</p><p><strong>cache</strong></p><blockquote><p>需要python3.9及以上版本</p></blockquote><p>简单轻量级未绑定函数缓存。 有时称为 <a href="https://en.wikipedia.org/wiki/Memoization" target="_blank" rel="noreferrer">&quot;memoize&quot;</a>。返回值与 <code>lru_cache(maxsize=None)</code> 相同，创建一个查找函数参数的字典的简单包装器。 因为它不需要移出旧值，所以比带有大小限制的<code>lru_cache</code>更小更快。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">cache</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;"># 因为没有缓存，进行了11次递归</span></span>
<span class="line"><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;"># 直接从缓存中获得结果</span></span>
<span class="line"><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;"># 只需要递归2次，其他10次从缓存获取</span></span>
<span class="line"></span></code></pre></div><p>当然这个<code>cache</code>是线程安全的，可以在多线程中使用</p><p><strong>reduce</strong></p><p>将两个参数的 <em>function</em> 从左至右积累地应用到 <em>iterable</em> 的条目，以便将该可迭代对象缩减为单一的值。 例如，<code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code> 是计算 <code>((((1+2)+3)+4)+5)</code> 的值。 左边的参数 <em>x</em> 是积累值而右边的参数 <em>y</em> 则是来自 <em>iterable</em> 的更新值。 如果存在可选项 <em>initializer</em>，它会被放在参与计算的可迭代对象的条目之前，并在可迭代对象为空时作为默认值。 如果没有给出 <em>initializer</em> 并且 <em>iterable</em> 仅包含一个条目，则将返回第一项。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> functools </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> reduce</span></span>
<span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> sqlalchemy </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> or_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> service </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> db</span></span>
<span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">models </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> UsersModel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">clauses </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">UsersModel</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">user_name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AAA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">           UsersModel</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">email</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AAA@haha.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">           UsersModel</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">phone_number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123456</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 用户名或邮箱地址或者手机号寻找用户</span></span>
<span class="line"><span style="color:#A6ACCD;">query </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> db</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">UsersModel</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\\</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">filter</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">UsersModel</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">status</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span></span>
<span class="line"><span style="color:#82AAFF;">           </span><span style="color:#A6ACCD;">reduce</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">or_</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> clauses</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;">SELECT users.id AS users_id</span></span>
<span class="line"><span style="color:#676E95;">FROM users</span></span>
<span class="line"><span style="color:#676E95;">WHERE users.\`status\` = 1</span></span>
<span class="line"><span style="color:#676E95;">AND (</span></span>
<span class="line"><span style="color:#676E95;">  users.user_name = &#39;AAA&#39; </span></span>
<span class="line"><span style="color:#676E95;">  OR users.email = &#39;AAA@haha.com&#39; </span></span>
<span class="line"><span style="color:#676E95;">  OR users.phone_number = &#39;123456&#39;</span></span>
<span class="line"><span style="color:#676E95;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre></div><p><strong>wraps</strong></p><p>这是一个便捷函数，用于在定义包装器函数时发起调用 <a href="https://docs.python.org/zh-cn/3/library/functools.html#functools.update_wrapper" target="_blank" rel="noreferrer"><code>update_wrapper()</code></a> 作为函数装饰器。 它等价于 <code>partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</code>。 例如:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> functools </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> wraps</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">my_decorator</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">wraps</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wrapper</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">kwds</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Calling decorated function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(*</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">**</span><span style="color:#82AAFF;">kwds</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> wrapper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">my_decorator</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">example</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#676E95;">Docstring</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Called example function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">example</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#676E95;"># Calling decorated function</span></span>
<span class="line"><span style="color:#676E95;"># Called example function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">example</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__name__  </span><span style="color:#676E95;"># example</span></span>
<span class="line"><span style="color:#A6ACCD;">example</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__doc__  </span><span style="color:#676E95;"># Docstring</span></span>
<span class="line"></span></code></pre></div><p>如果不使用这个装饰器工厂函数，则 example 函数的名称将变为 <code>&#39;wrapper&#39;</code>，并且 <code>example()</code> 原本的文档字符串将会丢失。</p><p><strong>partial</strong></p><p>返回一个新的 <a href="https://docs.python.org/zh-cn/3/library/functools.html#partial-objects" target="_blank" rel="noreferrer">部分对象</a>，当被调用时其行为类似于 <em>func</em> 附带位置参数 <em>args</em> 和关键字参数 <em>keywords</em> 被调用。 如果为调用提供了更多的参数，它们会被附加到 <em>args</em>。 如果提供了额外的关键字参数，它们会扩展并重载 <em>keywords</em>。 大致等价于:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">partial</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> /, </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">keywords</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newfunc</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">fargs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">fkeywords</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        newkeywords </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{**</span><span style="color:#A6ACCD;">keywords</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">fkeywords</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(*</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">fargs</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">**</span><span style="color:#82AAFF;">newkeywords</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    newfunc</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> func</span></span>
<span class="line"><span style="color:#A6ACCD;">    newfunc</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">args</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> args</span></span>
<span class="line"><span style="color:#A6ACCD;">    newfunc</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">keywords</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> keywords</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> newfunc</span></span>
<span class="line"></span></code></pre></div><p><a href="https://docs.python.org/zh-cn/3/library/functools.html#functools.partial" target="_blank" rel="noreferrer"><code>partial()</code></a> 会被“冻结了”一部分函数参数和/或关键字的部分函数应用所使用，从而得到一个具有简化签名的新对象。 例如，<a href="https://docs.python.org/zh-cn/3/library/functools.html#functools.partial" target="_blank" rel="noreferrer"><code>partial()</code></a> 可用来创建一个行为类似于 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int" target="_blank" rel="noreferrer"><code>int()</code></a> 函数的可调用对象，其中 <em>base</em> 参数默认为二：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">from functools import partial</span></span>
<span class="line"><span style="color:#A6ACCD;">basetwo = partial(int, base=2)</span></span>
<span class="line"><span style="color:#A6ACCD;">basetwo(&#39;11&#39;)  # 3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 等价于如下，区别就在于base=2被提前固定了</span></span>
<span class="line"><span style="color:#A6ACCD;">int(&#39;11&#39;, base=2)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 另一个例子</span></span>
<span class="line"><span style="color:#A6ACCD;">def say_hello(greet, your_name):</span></span>
<span class="line"><span style="color:#A6ACCD;">    print(greet, your_name)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">hello_greet = partial(say_hello, &#39;Hello&#39;)  # greet = &#39;Hello&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">hello_greet(&#39;xionzhi&#39;)  # Hello xionzhi</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">hi_greet = partial(say_hello, &#39;Hi&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">hi_greet(&#39;xionzhi&#39;)  # Hi xionzhi</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>参考：<br></p><p><a href="https://docs.python.org/zh-cn/3/library/functools.html" target="_blank" rel="noreferrer">[docs.python.org] functools --- 高阶函数和可调用对象上的操作</a></p><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c07/p08_make_callable_with_fewer_arguments.html" target="_blank" rel="noreferrer">[python3-cookbook] 7.8 减少可调用对象的参数个数</a></p>`,31),e=[o];function t(c,r,F,y,D,A){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
