[{"title":"Python Redis BitMap储存用户签到","author":"xionzhi","date":"2022-12-21","showAccessNumber":true,"categories":["测试"],"tags":["标签1","标签2","标签3"],"excerpt":"Redis提供的数据类型位图`BitMap`，每个`bit`位对应`0`和`1`两个状态。虽然内部还是采用`String`类型存储，但Redis提供了一些指令用于直接操作`BitMap`，可以把它看作一个`bit`数组，数组的下标就是偏移量。\n它的优点是内存开销小，效率高且操作简单，很适合用于签到这类场景。缺点在于位计算和位表示数值的局限。如果要用位来做业务数据记录，就不要在意value的值。","link":"/posts/Python Redis BitMap储存用户签到.html"},{"title":"Python标准运算符替代函数operator","author":"xionzhi","date":"2022-12-20","showAccessNumber":true,"categories":["测试"],"tags":["标签1","标签2","标签3"],"excerpt":"Python标准运算符替代函数operator```python # Python 3.8.11\nfrom operator import *\n\n# 1. 绝对值 abs(100)  # 100 abs(-100)  # 100 abs(2j + 1)  # 2.23606797749979, 返回复数的绝对值 (a^2+b^2)**0.5\n# 2. 加法 add(100, 1)  # 101, a + b","link":"/posts/Python标准运算符替代函数operator.html"},{"title":"test","author":"xionzhi","date":"2022-12-20","showAccessNumber":true,"categories":["测试"],"tags":["标签1","标签2","标签3"],"excerpt":"","link":"/posts/test.html"},{"title":"python3.6之后字典类型为什么是有序的","author":"xionzhi","date":"2022-12-19","showAccessNumber":true,"categories":["测试"],"tags":["标签1","标签2","标签3"],"excerpt":"有序字典设计使用基于[**Raymond Hettinger**](https://mail.python.org/pipermail/python-dev/2012-December/123028.html) 提出的`More compact dictionaries with faster iteration`， 最开始由 [**PyPy**](https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html) 实现。`dict()`与 `Python 3.5` 相比，新版本的内存使用量减少了`20%` 到 `25%`，从 `Python 3.8` 开始，字典还支持反向迭代`reversed`。","link":"/posts/python3.6之后字典类型为什么是有序的.html"}]